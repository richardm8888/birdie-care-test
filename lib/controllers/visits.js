"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitsController = void 0;
const express = require("express");
const visits_1 = require("../models/visits");
const visitCalendar_1 = require("../models/visitCalendar");
exports.visitsController = express.Router();
const RECIPIENT_ID = 'df50cac5-293c-490d-a06c-ee26796f850d';
function getDateParams(req) {
    const from_date = req.query.from_date;
    const to_date = req.query.to_date;
    return { from_date, to_date };
}
function getDateParamError(from_date, to_date) {
    if (!from_date || !to_date) {
        return {
            error: {
                "code": "MISSING_PARAM",
                "message": "Must provide both a `from_date` and `to_date` query parameter"
            }
        };
    }
    else {
        return null;
    }
}
exports.visitsController.get('/visits', (req, res) => {
    const { from_date, to_date } = getDateParams(req);
    const date_error = getDateParamError(from_date, to_date);
    if (date_error) {
        res.status(400).json(date_error);
        return;
    }
    visits_1.default.getVisits(from_date, to_date, RECIPIENT_ID).then((data) => {
        res.status(data.status).json(data.message);
    });
});
exports.visitsController.get('/visit-calendar', (req, res) => {
    const { from_date, to_date } = getDateParams(req);
    const date_error = getDateParamError(from_date, to_date);
    if (date_error) {
        res.status(400).json(date_error);
        return;
    }
    visitCalendar_1.default.getVisitCalendar(from_date, to_date, RECIPIENT_ID).then((data) => {
        res.status(data.status).json(data.message);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyb2xsZXJzL3Zpc2l0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBbUM7QUFDbkMsNkNBQTBEO0FBQzFELDJEQUErRTtBQUVsRSxRQUFBLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQU1qRCxNQUFNLFlBQVksR0FBRyxzQ0FBc0MsQ0FBQztBQUU1RCxTQUFTLGFBQWEsQ0FBQyxHQUFRO0lBQzNCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBRWxDLE9BQU8sRUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsU0FBaUIsRUFBRSxPQUFlO0lBQ3pELElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDeEIsT0FBTztZQUNILEtBQUssRUFBRTtnQkFDSCxNQUFNLEVBQUUsZUFBZTtnQkFDdkIsU0FBUyxFQUFFLCtEQUErRDthQUM3RTtTQUNKLENBQUM7S0FDTDtTQUFNO1FBQ0gsT0FBTyxJQUFJLENBQUM7S0FDZjtBQUNMLENBQUM7QUFHRCx3QkFBZ0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQ3pDLE1BQU0sRUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFDLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6RCxJQUFJLFVBQVUsRUFBRTtRQUNaLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pDLE9BQU87S0FDVjtJQUVELGdCQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBb0IsRUFBRSxFQUFFO1FBQzdFLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQztBQUdILHdCQUFnQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUNqRCxNQUFNLEVBQUMsU0FBUyxFQUFFLE9BQU8sRUFBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoRCxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekQsSUFBSSxVQUFVLEVBQUU7UUFDWixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqQyxPQUFPO0tBQ1Y7SUFFRCx1QkFBYSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBMkIsRUFBRSxFQUFFO1FBQ2xHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBWaXNpdHMsIHsgVmlzaXRzUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvdmlzaXRzJztcbmltcG9ydCBWaXNpdENhbGVuZGFyLCB7IFZpc2l0Q2FsZW5kYXJSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy92aXNpdENhbGVuZGFyJztcblxuZXhwb3J0IGNvbnN0IHZpc2l0c0NvbnRyb2xsZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG4vKlxuICAgIEFzIGkgYW0gbGFja2luZyBhIHdheSBvZiBpZGVudGlmeWluZyBhIHBhdGllbnQsIGkndmUgcGlja2VkIG9uZSBhdCByYW5kb20gZm9yIG5vd1xuICAgIHRoaXMgd291bGQgY29tZSBmcm9tIHRoZSBBUEkgcmVxdWVzdCBpbiBhIHJlYWwtd29ybGQgYXBwbGljYXRpb25cbiovXG5jb25zdCBSRUNJUElFTlRfSUQgPSAnZGY1MGNhYzUtMjkzYy00OTBkLWEwNmMtZWUyNjc5NmY4NTBkJztcblxuZnVuY3Rpb24gZ2V0RGF0ZVBhcmFtcyhyZXE6IGFueSkge1xuICAgIGNvbnN0IGZyb21fZGF0ZSA9IHJlcS5xdWVyeS5mcm9tX2RhdGU7XG4gICAgY29uc3QgdG9fZGF0ZSA9IHJlcS5xdWVyeS50b19kYXRlO1xuXG4gICAgcmV0dXJuIHtmcm9tX2RhdGUsIHRvX2RhdGV9O1xufVxuXG5mdW5jdGlvbiBnZXREYXRlUGFyYW1FcnJvcihmcm9tX2RhdGU6IHN0cmluZywgdG9fZGF0ZTogc3RyaW5nKSB7XG4gICAgaWYgKCFmcm9tX2RhdGUgfHwgIXRvX2RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTUlTU0lOR19QQVJBTVwiLFxuICAgICAgICAgICAgICAgIFwibWVzc2FnZVwiOiBcIk11c3QgcHJvdmlkZSBib3RoIGEgYGZyb21fZGF0ZWAgYW5kIGB0b19kYXRlYCBxdWVyeSBwYXJhbWV0ZXJcIlxuICAgICAgICAgICAgfSBcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cblxudmlzaXRzQ29udHJvbGxlci5nZXQoJy92aXNpdHMnLCAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCB7ZnJvbV9kYXRlLCB0b19kYXRlfSA9IGdldERhdGVQYXJhbXMocmVxKTtcbiAgICBjb25zdCBkYXRlX2Vycm9yID0gZ2V0RGF0ZVBhcmFtRXJyb3IoZnJvbV9kYXRlLCB0b19kYXRlKTtcbiAgICBpZiAoZGF0ZV9lcnJvcikge1xuICAgICAgICByZXMuc3RhdHVzKDQwMCkuanNvbihkYXRlX2Vycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIFZpc2l0cy5nZXRWaXNpdHMoZnJvbV9kYXRlLCB0b19kYXRlLCBSRUNJUElFTlRfSUQpLnRoZW4oKGRhdGE6IFZpc2l0c1Jlc3BvbnNlKSA9PiB7XG4gICAgICAgIHJlcy5zdGF0dXMoZGF0YS5zdGF0dXMpLmpzb24oZGF0YS5tZXNzYWdlKTtcbiAgICB9KTtcbn0pO1xuXG5cbnZpc2l0c0NvbnRyb2xsZXIuZ2V0KCcvdmlzaXQtY2FsZW5kYXInLCAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCB7ZnJvbV9kYXRlLCB0b19kYXRlfSA9IGdldERhdGVQYXJhbXMocmVxKTtcbiAgICBjb25zdCBkYXRlX2Vycm9yID0gZ2V0RGF0ZVBhcmFtRXJyb3IoZnJvbV9kYXRlLCB0b19kYXRlKTtcbiAgICBpZiAoZGF0ZV9lcnJvcikge1xuICAgICAgICByZXMuc3RhdHVzKDQwMCkuanNvbihkYXRlX2Vycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIFZpc2l0Q2FsZW5kYXIuZ2V0VmlzaXRDYWxlbmRhcihmcm9tX2RhdGUsIHRvX2RhdGUsIFJFQ0lQSUVOVF9JRCkudGhlbigoZGF0YTogVmlzaXRDYWxlbmRhclJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHJlcy5zdGF0dXMoZGF0YS5zdGF0dXMpLmpzb24oZGF0YS5tZXNzYWdlKTtcbiAgICB9KTtcbn0pO1xuIl19