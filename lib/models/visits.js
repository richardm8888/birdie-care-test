"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const db_1 = require("./db");
class Visits {
    static getErrorResponse(query_error) {
        return {
            status: 400,
            message: {
                error: {
                    "code": query_error.code,
                    "message": query_error.sqlMessage
                }
            }
        };
    }
    static getSuccessResponse(visits) {
        return {
            status: 200,
            message: {
                visits: visits
            }
        };
    }
    static convertResultsToResponseFormat(query_results) {
        let visits = [];
        query_results.forEach((visit) => {
            visits.push({
                "visit_id": visit.visit_id,
                "start_timestamp": visit.start_timestamp,
                "end_timestamp": visit.end_timestamp,
                "n_events": visit.n_events,
                "events": JSON.parse(visit.events)
            });
        });
        return visits;
    }
    static getVisits(from_date, to_date, recipient_id) {
        return new Promise(function (resolve) {
            db_1.default.query(`
                SELECT 
                    visit_id, 
                    MIN(events.timestamp) AS start_timestamp, 
                    MAX(events.timestamp) AS end_timestamp, 
                    COUNT(id) AS "n_events",
                    JSON_ARRAYAGG(payload) AS "events"
                FROM events
                WHERE visit_id IS NOT NULL
                AND DATE(events.timestamp) BETWEEN ? AND ?
                AND care_recipient_id = ?
                GROUP BY
                    visit_id
                `, [from_date, to_date, recipient_id], function (query_error, query_results) {
                if (query_error) {
                    resolve(Visits.getErrorResponse(query_error));
                }
                else {
                    const visits = Visits.convertResultsToResponseFormat(query_results);
                    resolve(Visits.getSuccessResponse(visits));
                }
            });
        });
    }
}
exports.default = Visits;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVscy92aXNpdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBOEI7QUF1QjlCLE1BQXFCLE1BQU07SUFDdkIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQWdCO1FBQ3BDLE9BQU87WUFDSCxNQUFNLEVBQUUsR0FBRztZQUNYLE9BQU8sRUFBRTtnQkFDTCxLQUFLLEVBQUU7b0JBQ0gsTUFBTSxFQUFFLFdBQVcsQ0FBQyxJQUFJO29CQUN4QixTQUFTLEVBQUUsV0FBVyxDQUFDLFVBQVU7aUJBQ3BDO2FBQ0o7U0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxNQUFlO1FBQ3JDLE9BQU87WUFDSCxNQUFNLEVBQUUsR0FBRztZQUNYLE9BQU8sRUFBRTtnQkFDTCxNQUFNLEVBQUUsTUFBTTthQUNqQjtTQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsTUFBTSxDQUFDLDhCQUE4QixDQUFDLGFBQWtCO1FBQ3BELElBQUksTUFBTSxHQUFZLEVBQUUsQ0FBQztRQUN6QixhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDUixVQUFVLEVBQUUsS0FBSyxDQUFDLFFBQVE7Z0JBQzFCLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxlQUFlO2dCQUN4QyxlQUFlLEVBQUUsS0FBSyxDQUFDLGFBQWE7Z0JBQ3BDLFVBQVUsRUFBRSxLQUFLLENBQUMsUUFBUTtnQkFDMUIsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQzthQUNyQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQWlCLEVBQUUsT0FBZSxFQUFFLFlBQW9CO1FBQ3JFLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBUyxPQUF1QztZQUMvRCxZQUFVLENBQUMsS0FBSyxDQUNaOzs7Ozs7Ozs7Ozs7O2lCQWFDLEVBQ0QsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxFQUNsQyxVQUFVLFdBQWUsRUFBRSxhQUFpQjtnQkFDeEMsSUFBRyxXQUFXLEVBQUU7b0JBQ1osT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO2lCQUNqRDtxQkFDSTtvQkFDRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsOEJBQThCLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQ3BFLE9BQU8sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztpQkFDOUM7WUFDTCxDQUFDLENBQ0osQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBbEVELHlCQWtFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25uZWN0aW9uIGZyb20gJy4vZGInO1xuXG5leHBvcnQgdHlwZSBWaXNpdHNSZXNwb25zZSA9IHtcbiAgICBzdGF0dXM6IG51bWJlcjtcbiAgICBtZXNzYWdlOiB7XG4gICAgICAgIGVycm9yPzogRXJyb3I7XG4gICAgICAgIHZpc2l0cz86IFZpc2l0W107XG4gICAgfVxufTtcblxudHlwZSBFcnJvciA9IHtcbiAgICBjb2RlOiBzdHJpbmc7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG50eXBlIFZpc2l0ID0ge1xuICAgIHZpc2l0X2lkOiBzdHJpbmc7XG4gICAgc3RhcnRfdGltZXN0YW1wOiBEYXRlO1xuICAgIGVuZF90aW1lc3RhbXA6IERhdGU7XG4gICAgbl9ldmVudHM6IG51bWJlcjtcbiAgICBldmVudHM6IGFueVtdXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaXNpdHMge1xuICAgIHN0YXRpYyBnZXRFcnJvclJlc3BvbnNlKHF1ZXJ5X2Vycm9yOiBhbnkpOiBWaXNpdHNSZXNwb25zZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgICAgICAgICBcImNvZGVcIjogcXVlcnlfZXJyb3IuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlXCI6IHF1ZXJ5X2Vycm9yLnNxbE1lc3NhZ2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFN1Y2Nlc3NSZXNwb25zZSh2aXNpdHM6IFZpc2l0W10pOiBWaXNpdHNSZXNwb25zZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICB2aXNpdHM6IHZpc2l0c1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBjb252ZXJ0UmVzdWx0c1RvUmVzcG9uc2VGb3JtYXQocXVlcnlfcmVzdWx0czogYW55KTogVmlzaXRbXSB7XG4gICAgICAgIGxldCB2aXNpdHM6IFZpc2l0W10gPSBbXTtcbiAgICAgICAgcXVlcnlfcmVzdWx0cy5mb3JFYWNoKCh2aXNpdDogYW55KSA9PiB7XG4gICAgICAgICAgICB2aXNpdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgXCJ2aXNpdF9pZFwiOiB2aXNpdC52aXNpdF9pZCxcbiAgICAgICAgICAgICAgICBcInN0YXJ0X3RpbWVzdGFtcFwiOiB2aXNpdC5zdGFydF90aW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgXCJlbmRfdGltZXN0YW1wXCI6IHZpc2l0LmVuZF90aW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgXCJuX2V2ZW50c1wiOiB2aXNpdC5uX2V2ZW50cyxcbiAgICAgICAgICAgICAgICBcImV2ZW50c1wiOiBKU09OLnBhcnNlKHZpc2l0LmV2ZW50cylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZpc2l0cztcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0VmlzaXRzKGZyb21fZGF0ZTogc3RyaW5nLCB0b19kYXRlOiBzdHJpbmcsIHJlY2lwaWVudF9pZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlOiAodmFsdWU6IFZpc2l0c1Jlc3BvbnNlKSA9PiBhbnkpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIFNFTEVDVCBcbiAgICAgICAgICAgICAgICAgICAgdmlzaXRfaWQsIFxuICAgICAgICAgICAgICAgICAgICBNSU4oZXZlbnRzLnRpbWVzdGFtcCkgQVMgc3RhcnRfdGltZXN0YW1wLCBcbiAgICAgICAgICAgICAgICAgICAgTUFYKGV2ZW50cy50aW1lc3RhbXApIEFTIGVuZF90aW1lc3RhbXAsIFxuICAgICAgICAgICAgICAgICAgICBDT1VOVChpZCkgQVMgXCJuX2V2ZW50c1wiLFxuICAgICAgICAgICAgICAgICAgICBKU09OX0FSUkFZQUdHKHBheWxvYWQpIEFTIFwiZXZlbnRzXCJcbiAgICAgICAgICAgICAgICBGUk9NIGV2ZW50c1xuICAgICAgICAgICAgICAgIFdIRVJFIHZpc2l0X2lkIElTIE5PVCBOVUxMXG4gICAgICAgICAgICAgICAgQU5EIERBVEUoZXZlbnRzLnRpbWVzdGFtcCkgQkVUV0VFTiA/IEFORCA/XG4gICAgICAgICAgICAgICAgQU5EIGNhcmVfcmVjaXBpZW50X2lkID0gP1xuICAgICAgICAgICAgICAgIEdST1VQIEJZXG4gICAgICAgICAgICAgICAgICAgIHZpc2l0X2lkXG4gICAgICAgICAgICAgICAgYCxcbiAgICAgICAgICAgICAgICBbZnJvbV9kYXRlLCB0b19kYXRlLCByZWNpcGllbnRfaWRdLCBcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocXVlcnlfZXJyb3I6YW55LCBxdWVyeV9yZXN1bHRzOmFueSkgeyAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYocXVlcnlfZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoVmlzaXRzLmdldEVycm9yUmVzcG9uc2UocXVlcnlfZXJyb3IpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpc2l0cyA9IFZpc2l0cy5jb252ZXJ0UmVzdWx0c1RvUmVzcG9uc2VGb3JtYXQocXVlcnlfcmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFZpc2l0cy5nZXRTdWNjZXNzUmVzcG9uc2UodmlzaXRzKSk7ICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApOyBcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19