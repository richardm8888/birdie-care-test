"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const db_1 = require("./db");
class VisitCalendar {
    static getErrorResponse(query_error) {
        return {
            status: 400,
            message: {
                error: {
                    "code": query_error.code,
                    "message": query_error.sqlMessage
                }
            }
        };
    }
    static getSuccessResponse(visitCalendar) {
        return {
            status: 200,
            message: {
                visit_calendar: visitCalendar
            }
        };
    }
    static getVisitCalendar(from_date, to_date, recipient_id) {
        return new Promise(function (resolve) {
            db_1.default.query(`
                SELECT DATE(timestamp) AS "date", COUNT(distinct(visit_id)) AS "n_visits"
                FROM events
                WHERE visit_id IS NOT NULL
                AND DATE(events.timestamp) BETWEEN ? and ?
                AND care_recipient_id = ?
                GROUP BY
                    DATE(timestamp)
                `, [from_date, to_date, recipient_id], function (query_error, query_results) {
                if (query_error) {
                    resolve(VisitCalendar.getErrorResponse(query_error));
                }
                else {
                    resolve(VisitCalendar.getSuccessResponse(query_results));
                }
            });
        });
    }
}
exports.default = VisitCalendar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaXRDYWxlbmRhci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvdmlzaXRDYWxlbmRhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE4QjtBQW9COUIsTUFBcUIsYUFBYTtJQUM5QixNQUFNLENBQUMsZ0JBQWdCLENBQUMsV0FBZ0I7UUFDcEMsT0FBTztZQUNILE1BQU0sRUFBRSxHQUFHO1lBQ1gsT0FBTyxFQUFFO2dCQUNMLEtBQUssRUFBRTtvQkFDSCxNQUFNLEVBQUUsV0FBVyxDQUFDLElBQUk7b0JBQ3hCLFNBQVMsRUFBRSxXQUFXLENBQUMsVUFBVTtpQkFDcEM7YUFDSjtTQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGFBQWtDO1FBQ3hELE9BQU87WUFDSCxNQUFNLEVBQUUsR0FBRztZQUNYLE9BQU8sRUFBRTtnQkFDTCxjQUFjLEVBQUUsYUFBYTthQUNoQztTQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQWlCLEVBQUUsT0FBZSxFQUFFLFlBQW9CO1FBQzVFLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBUyxPQUE4QztZQUN0RSxZQUFVLENBQUMsS0FBSyxDQUNaOzs7Ozs7OztpQkFRQyxFQUNELENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsRUFDbEMsVUFBVSxXQUFlLEVBQUUsYUFBaUM7Z0JBQ3hELElBQUcsV0FBVyxFQUFFO29CQUNaLE9BQU8sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztpQkFDeEQ7cUJBQ0k7b0JBQ0QsT0FBTyxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2lCQUM1RDtZQUNMLENBQUMsQ0FDSixDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUE5Q0QsZ0NBOENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbm5lY3Rpb24gZnJvbSAnLi9kYic7XG5cbmV4cG9ydCB0eXBlIFZpc2l0Q2FsZW5kYXJSZXNwb25zZSA9IHtcbiAgICBzdGF0dXM6IG51bWJlcjtcbiAgICBtZXNzYWdlOiB7XG4gICAgICAgIGVycm9yPzogRXJyb3I7XG4gICAgICAgIHZpc2l0X2NhbGVuZGFyPzogVmlzaXRDYWxlbmRhclR5cGVbXTtcbiAgICB9XG59O1xuXG50eXBlIEVycm9yID0ge1xuICAgIGNvZGU6IHN0cmluZztcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbnR5cGUgVmlzaXRDYWxlbmRhclR5cGUgPSB7XG4gICAgZGF0ZTogRGF0ZTtcbiAgICBuX3Zpc2l0czogbnVtYmVyO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlzaXRDYWxlbmRhciB7XG4gICAgc3RhdGljIGdldEVycm9yUmVzcG9uc2UocXVlcnlfZXJyb3I6IGFueSk6IFZpc2l0Q2FsZW5kYXJSZXNwb25zZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgICAgICAgICBcImNvZGVcIjogcXVlcnlfZXJyb3IuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlXCI6IHF1ZXJ5X2Vycm9yLnNxbE1lc3NhZ2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFN1Y2Nlc3NSZXNwb25zZSh2aXNpdENhbGVuZGFyOiBWaXNpdENhbGVuZGFyVHlwZVtdKTogVmlzaXRDYWxlbmRhclJlc3BvbnNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgIHZpc2l0X2NhbGVuZGFyOiB2aXNpdENhbGVuZGFyXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFZpc2l0Q2FsZW5kYXIoZnJvbV9kYXRlOiBzdHJpbmcsIHRvX2RhdGU6IHN0cmluZywgcmVjaXBpZW50X2lkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmU6ICh2YWx1ZTogVmlzaXRDYWxlbmRhclJlc3BvbnNlKSA9PiBhbnkpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIFNFTEVDVCBEQVRFKHRpbWVzdGFtcCkgQVMgXCJkYXRlXCIsIENPVU5UKGRpc3RpbmN0KHZpc2l0X2lkKSkgQVMgXCJuX3Zpc2l0c1wiXG4gICAgICAgICAgICAgICAgRlJPTSBldmVudHNcbiAgICAgICAgICAgICAgICBXSEVSRSB2aXNpdF9pZCBJUyBOT1QgTlVMTFxuICAgICAgICAgICAgICAgIEFORCBEQVRFKGV2ZW50cy50aW1lc3RhbXApIEJFVFdFRU4gPyBhbmQgP1xuICAgICAgICAgICAgICAgIEFORCBjYXJlX3JlY2lwaWVudF9pZCA9ID9cbiAgICAgICAgICAgICAgICBHUk9VUCBCWVxuICAgICAgICAgICAgICAgICAgICBEQVRFKHRpbWVzdGFtcClcbiAgICAgICAgICAgICAgICBgLFxuICAgICAgICAgICAgICAgIFtmcm9tX2RhdGUsIHRvX2RhdGUsIHJlY2lwaWVudF9pZF0sIFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChxdWVyeV9lcnJvcjphbnksIHF1ZXJ5X3Jlc3VsdHM6VmlzaXRDYWxlbmRhclR5cGVbXSkgeyAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYocXVlcnlfZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoVmlzaXRDYWxlbmRhci5nZXRFcnJvclJlc3BvbnNlKHF1ZXJ5X2Vycm9yKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFZpc2l0Q2FsZW5kYXIuZ2V0U3VjY2Vzc1Jlc3BvbnNlKHF1ZXJ5X3Jlc3VsdHMpKTsgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7IFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=